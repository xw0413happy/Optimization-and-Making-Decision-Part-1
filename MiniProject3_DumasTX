# -*- coding: utf-8 -*-
"""
Created on Wed May  4 13:25:23 2022

@author: xw041
"""


# Mini-project 3
# Wang Xi, May 4th, 2022

# Import PuLP modeler
from pulp import *
# Import libraries
import os # for setting up working directory
import pandas as pd
import numpy as np

# Question 1
# 1st Approach--Pulp
os.chdir("C:\\Users\\xw041\\OneDrive - Texas Tech University\\Desktop\\TTU_8th_2022 Spring\\CE 5331 Optimization and Decision Making 1\\Miniproject 3")
os.getcwd()

# Read data
rain = pd.read_csv("Dumas_Rain_Data_10yrs.csv") 
rain.head()
rain25 = rain['Total'].quantile(0.25) # 25th drought percentile
rain75 = rain['Total'].quantile(0.75) # 75th wet percentile
rain25
rain75

# Question 1
# Create an instant problem of LpProblem for 25th percentile drought
problem = LpProblem(name='MiniProject3-25th-drought', sense=LpMaximize)

# Create decision variables
x1_25 = LpVariable('corn', lowBound=0, upBound=None, cat='Continuous') # continuous is default
x2_25 = LpVariable('cotton', lowBound=50, upBound=None, cat='Continuous')
x3_25 = LpVariable('sorghum', lowBound=0, upBound=None, cat='Continuous')

# Define the constraints
problem += 750*x1 + 500*x2 + 400*x3 # Objective function
problem += (20000 + 25*x1) + (15000 + 20*x2) + (10000 + 18*x3) <= 100000 # investment constraint
problem += x1 + x2 + x3 <= 640 # land constraint
problem += 28*x1 + 20*x2 + 18*x3 - rain25*640 <= 18*(x1 + x2 + x3) # water requirement constraint
# same result as belows
# problem += x1 + x2 + x3 == 640 # land constraint
# problem += 28*x1 + 20*x2 + 18*x3 - rain25*640 <= 18*640 # water requirement constraint

# The problem data is written to an .lp file
problem.writeLP("MiniProject3-25th-drought.lp")

# The problem is solved using PuLP's choice of Solver
problem.solve()

# The status of the solution is printed to the screen
print("Status:", LpStatus[problem.status])

# Each of the variables is printed with its optimum value
for v in problem.variables():
    print(v.name, "=", v.varValue)

revenue = value(problem.objective)
revenue
print("The maximal revenue with 25th drought is:${}".format(round(revenue))) 
# add 'dollar' sign for test

# Print the obj func optimal value and roots in another way
print("corn optimal value:", x1.varValue)
print("cotton optimal value:", x2.varValue)
print("sorghum optimal value:", x3.varValue)

# Result
The maximal revenue with 25th drought is:$467500
corn optimal value: 590.0
cotton optimal value: 50.0
sorghum optimal value: 0.0

# Calculate net profit
profit = value(interv.objective) - (20000 + 590*25) - (15000 + 50*20)
profit # 340500.0



# Create an instant problem of LpProblem for 75th percentile wet land
problem = LpProblem(name='MiniProject3-75th-wet', sense=LpMaximize)

# 75th percentile wet
# Create decision variables
x1 = LpVariable('corn', lowBound=0, upBound=None, cat='Continuous') # continuous is default
x2 = LpVariable('cotton', lowBound=50, upBound=None, cat='Continuous')
x3 = LpVariable('sorghum', lowBound=0, upBound=None, cat='Continuous')

# Define the constraints
problem += 750*x1 + 500*x2 + 400*x3 # Objective function
problem += (20000 + 25*x1) + (15000 + 20*x2) + (10000 + 18*x3) <= 100000 # investment function
problem += x1 + x2 + x3 <= 640 # land constraint
problem += 28*x1 + 20*x2 + 18*x3 - rain75*640 <= 18*(x1 + x2 + x3) # water allocation constraint

# The problem data is written to an .lp file
problem.writeLP("MiniProject3-75th-wet.lp")

# The problem is solved using PuLP's choice of Solver
problem.solve()

# The status of the solution is printed to the screen
print("Status:", LpStatus[problem.status])

# Each of the variables is printed with its optimum value
for v in problem.variables():
    print(v.name, "=", v.varValue)

revenue = value(problem.objective)
revenue
print("The maximal revenue with 75th wet is:${}".format(round(revenue,3))) 
# add 'dollar' sign for test

# Print the obj func optimal value and roots in another way
print("corn optimal value:", x1.varValue)
print("cotton optimal value:", x2.varValue)
print("sorghum optimal value:", x3.varValue)

# Result
Status: Optimal
corn = 590.0
cotton = 50.0
sorghum = 0.0
The maximal revenue with 75th wet is:$467500.0
X1 optimal value: 590.0
X2 optimal value: 50.0
X3 optimal value: 0.0



# codes based on water allocation Fig 1
# Define variables
x11 = LpVariable("corn-revenue1", lowBound=0, upBound=22, cat="Continuous")
x12 = LpVariable("corn-revenue2", lowBound=0, upBound=30, cat="Continuous")
x13 = LpVariable("corn-revenue3", lowBound=0, upBound=40, cat="Continuous")
alpha11 = LpVariable("alpha1-corn", lowBound=0, upBound=1, cat="Integer")
alpha12 = LpVariable("alpha2-corn", lowBound=0, upBound=1, cat="Integer")
alpha13 = LpVariable("alpha3-corn", lowBound=0, upBound=1, cat="Integer")

x21 = LpVariable("cotton-revenue1", lowBound=0, upBound=22, cat="Continuous")
x22 = LpVariable("cotton-revenue2", lowBound=0, upBound=35, cat="Continuous")
alpha21 = LpVariable("alpha1-cotton", lowBound=0, upBound=1, cat="Integer")
alpha22 = LpVariable("alpha2-cotton", lowBound=0, upBound=1, cat="Integer")

x31 = LpVariable("sorghum-revenue1", lowBound=0, upBound=20, cat="Continuous")
x32 = LpVariable("sorghum-revenue2", lowBound=0, upBound=35, cat="Continuous")
alpha31 = LpVariable("alpha1-sorghum", lowBound=0, upBound=1, cat="Integer")
alpha32 = LpVariable("alpha2-sorgum", lowBound=0, upBound=1, cat="Integer")




# Question 2
# Basic Structure Design
# prob_cor = LpProblem(name='piecewise-corn', sense=LpMaximize)
# prob_cor += 0*alpha11 + 100/22*x11 + 100*alpha12 + 700/8*x12 + 800*alpha13 + 100/10*x13 # Objective function
# prob_cor += alpha11 + alpha12 +alpha13 <= 1 # to define binary variables
# prob_cor += x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13 -rain75*640 <= 18*640 # water allocation constraints ???
# prob_cor += x11 - 22*alpha11 <= 0
# prob_cor += x12 - 8*alpha12 <= 0
# prob_cor += x13 - 10*alpha13 <= 0

# prob_cot = LpProblem(name='piecewise-cotton', sense=LpMaximize)
# prob_cot += 0*alpha21 + 550/22*x21 + 550*alpha22 + 5/13*x22 # Objective function
# prob_cot += alpha21 + alpha22 <= 1 # to define binary variables
# prob_cot += x21 + 0*alpha21 + x22 + 22*alpha22 -rain75*640 <= 18*640 # water allocation constraints ???
# prob += x21 + 0*alpha21 + x22 + 22*alpha22 >=50 # cotton must be planted at least 50 acres
# prob_cot += x21 - 22*alpha21 <= 0
# prob_cot += x22 - 13*alpha22 <= 0

# prob_sor = LpProblem(name='piecewise-sorghum', sense=LpMaximize)
# prob_sor += 0*alpha31 + 450/20*x31 + 450*alpha32 + 5/15*x32 # Objective function
# prob_sor += alpha31 + alpha32 <= 1 # to define binary variables
# prob_sor += x31 + 0*alpha31 + x32 + 20*alpha32 -rain75*640 <= 18*640 # water allocation constraints ???
# prob_sor += x31 - 20*alpha31 <= 0
# prob_sor += x32 - 15*alpha32 <= 0


# Question 2 codes from here
# Define the LP Problem and add constraints
prob = LpProblem(name='piecewise-revenue', sense=LpMaximize)
prob += (0*alpha11 + 100/22*x11 + 100*alpha12 + 700/8*x12 + 800*alpha13 + 100/10*x13) + (0*alpha21 + 550/22*x21 + 550*alpha22 + 5/13*x22) + (0*alpha31 + 450/20*x31 + 450*alpha32 + 5/15*x32)# Objective function
prob += alpha11 + alpha12 +alpha13 <= 1 # to define corn binary variables
prob += alpha21 + alpha22 <= 1 # to define cotton binary variables
prob += alpha31 + alpha32 <= 1 # to define sorghum binary variables
prob += 28*(x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13) + 20*(x21 + 0*alpha21 + x22 + 22*alpha22) + 18*(x31 + 0*alpha31 + x32 + 20*alpha32) - rain75*((x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13) + (x21 + 0*alpha21 + x22 + 22*alpha22) + (x31 + 0*alpha31 + x32 + 20*alpha32)) <= 18*((x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13) + (x21 + 0*alpha21 + x22 + 22*alpha22) + (x31 + 0*alpha31 + x32 + 20*alpha32)) # water allocation constraints ???
prob += (x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13) + (x21 + 0*alpha21 + x22 + 22*alpha22) + (x31 + 0*alpha31 + x32 + 20*alpha32) <= 640
prob += (20000 + 25*(x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13)) + (15000 + 20*(x21 + 0*alpha21 + x22 + 22*alpha22)) + (10000 + 18*(x31 + 0*alpha31 + x32 + 20*alpha32)) <= 100000
# prob += x21 + 0*alpha21 + x22 + 22*alpha22 >=50 # cotton must be planted at least 50 acres
prob += x11 - 22*alpha11 <= 0
prob += x12 - 8*alpha12 <= 0
prob += x13 - 10*alpha13 <= 0 
prob += x21 - 22*alpha21 <= 0
prob += x22 - 13*alpha22 <= 0
prob += x31 - 20*alpha31 <= 0
prob += x32 - 15*alpha32 <= 0

# The problem data is written to an .lp file
problem.writeLP("MiniProject3_75th.lp")

# The problem is solved using PuLP's default Solver
prob.solve()

# The status of the solution is printed to the screen
print("Status:", LpStatus[prob.status])

# Each of the variables is printed with its optimum value
for v in prob.variables():
    print(v.name, "=", v.varValue)

obj = value(prob.objective)
obj

# Result
Status: Optimal
alpha1_corn = 0
alpha1_cotton = 0
alpha1_sorghum = 0
alpha2_corn = 0
alpha2_cotton = 1
alpha2_sorgum = 1
alpha3_corn = 1
corn_revenue1 = 0.0
corn_revenue2 = 0.0
corn_revenue3 = 10.0
cotton_revenue1 = 0.0
cotton_revenue2 = 13.0
sorghum_revenue1 = 0.0
sorghum_revenue2 = 15.0
Out[29]: 1910.0

corn_area = x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13
corn_area = 10 + 30
corn_area # 40

cotton_area = x21 + 0*alpha21 + x22 + 22*alpha22
cotton_area = 13 + 22*1
cotton_area # 35

sorghum_area = x31 + 0*alpha31 + x32 + 20*alpha32
sorghum_area = 15 + 20*1
sorghum_area # 35

# 75th wet
# 640 acres of land will be all used
# Define the LP Problem and add constraints
prob = LpProblem(name='piecewise-revenue', sense=LpMaximize)
prob += (0*alpha11 + 100/22*x11 + 100*alpha12 + 700/8*x12 + 800*alpha13 + 100/10*x13) + (0*alpha21 + 550/22*x21 + 550*alpha22 + 5/13*x22) + (0*alpha31 + 450/20*x31 + 450*alpha32 + 5/15*x32)# Objective function
prob += alpha11 + alpha12 +alpha13 <= 1 # to define corn binary variables
prob += alpha21 + alpha22 <= 1 # to define cotton binary variables
prob += alpha31 + alpha32 <= 1 # to define sorghum binary variables
prob += 28*(x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13) + 20*(x21 + 0*alpha21 + x22 + 22*alpha22) + 18*(x31 + 0*alpha31 + x32 + 20*alpha32) - rain75*640 <= 18*640 # water allocation constraints ???
prob += (x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13) + (x21 + 0*alpha21 + x22 + 22*alpha22) + (x31 + 0*alpha31 + x32 + 20*alpha32) == 640
prob += (20000 + 25*(x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13)) + (15000 + 20*(x21 + 0*alpha21 + x22 + 22*alpha22)) + (10000 + 18*(x31 + 0*alpha31 + x32 + 20*alpha32)) <= 100000
# prob += x21 + 0*alpha21 + x22 + 22*alpha22 >= 50 # cotton must be planted at least 50 acres
prob += x11 - 22*alpha11 <= 0
prob += x12 - 8*alpha12 <= 0
prob += x13 - 10*alpha13 <= 0
prob += x21 - 22*alpha21 <= 0
prob += x22 - 13*alpha22 <= 0
prob += x31 - 20*alpha31 <= 0
prob += x32 - 15*alpha32 <= 0

# The problem data is written to an .lp file
problem.writeLP("MiniProject3_75th.lp")

# The problem is solved using PuLP's default Solver
prob.solve()

# The status of the solution is printed to the screen
print("Status:", LpStatus[prob.status])

# Each of the variables is printed with its optimum value
for v in prob.variables():
    print(v.name, "=", v.varValue)

obj = value(prob.objective)
obj

# Result
# Status: Infeasible


# 25th drought
# 640 acres of land will be all used
# Define the LP Problem and add constraints
prob = LpProblem(name='piecewise-revenue', sense=LpMaximize)
prob += (0*alpha11 + 100/22*x11 + 100*alpha12 + 700/8*x12 + 800*alpha13 + 100/10*x13) + (0*alpha21 + 550/22*x21 + 550*alpha22 + 5/13*x22) + (0*alpha31 + 450/20*x31 + 450*alpha32 + 5/15*x32)# Objective function
prob += alpha11 + alpha12 +alpha13 <= 1 # to define corn binary variables
prob += alpha21 + alpha22 <= 1 # to define cotton binary variables
prob += alpha31 + alpha32 <= 1 # to define sorghum binary variables
prob += 28*(x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13) + 20*(x21 + 0*alpha21 + x22 + 22*alpha22) + 18*(x31 + 0*alpha31 + x32 + 20*alpha32) - rain25*640 <= 18*640 # water allocation constraints ???
prob += (x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13) + (x21 + 0*alpha21 + x22 + 22*alpha22) + (x31 + 0*alpha31 + x32 + 20*alpha32) == 640
prob += (20000 + 25*(x11 + 0*alpha11 + x12 + 0*alpha12 + x13 + 30*alpha13)) + (15000 + 20*(x21 + 0*alpha21 + x22 + 22*alpha22)) + (10000 + 18*(x31 + 0*alpha31 + x32 + 20*alpha32)) <= 100000
# prob += x21 + 0*alpha21 + x22 + 22*alpha22 >= 50 # cotton must be planted at least 50 acres
prob += x11 - 22*alpha11 <= 0
prob += x12 - 8*alpha12 <= 0
prob += x13 - 10*alpha13 <= 0
prob += x21 - 22*alpha21 <= 0
prob += x22 - 13*alpha22 <= 0
prob += x31 - 20*alpha31 <= 0
prob += x32 - 15*alpha32 <= 0

# The problem data is written to an .lp file
problem.writeLP("MiniProject3_75th.lp")

# The problem is solved using PuLP's default Solver
prob.solve()
# prob.solve(solver=GLPK(msg=False))

# The status of the solution is printed to the screen
print("Status:", LpStatus[prob.status])

# Each of the variables is printed with its optimum value
for v in prob.variables():
    print(v.name, "=", v.varValue)

obj = value(prob.objective)
obj

# Result
# Status: Infeasible



# Question 3- Interval Linear Programming
# Structure design of linear interval programming
# Approach 1 of ILP
# Create an instant problem of LpProblem for 25th percentile drought
interv = LpProblem(name='MiniProject3-interval-linear-programming', sense=LpMaximize)

# Create decision variables
x1 = LpVariable('corn', lowBound=0, upBound=None, cat='Continuous') # continuous is default
x2 = LpVariable('cotton', lowBound=50, upBound=None, cat='Continuous')
x3 = LpVariable('sorghum', lowBound=0, upBound=None, cat='Continuous')
# alpha = LpVariable("alpha", lowBound=0, upBound=1, cat='Continuous')

# maximize the obj function: [500,750]corn + [400,500]cotton + [375,400]sorghum
interv += 1/2*(500 + 750)*x1 + 1/2*(400 + 500)*x2 + 1/2*(375 + 400)*x3 # Objective function

# Subject to the constraints
alpha=0.20
# investment constraint:  [25,40]*x1 + [20,30]*x2 + [12,18]*x3 <= 100000 - 20000 - 15000 - 10000
interv += 25*x1 + 20*x2 + 12*x3 <= 100000 - 20000 - 15000 - 10000 # 55000
interv += (55000) + (55000) - ((25+40)*x1 + (20+30)*x2 + (12+18)*x3) >= alpha*((40-25)*x1 + (30-20)*x2 + (18-12)*x3)
interv += x1 + x2 + x3 == 640 # land constraint
# water constraint:  [25,30]*x1 + [18,22]*x2 + [16,18]*x3 <= 18*640 + [15,20]*640
interv += 25*x1 + 18*x2 + 16*x3 <= 18*640 + 20*640
interv += (18*640 + 15*640) + (18*640 + 20*640) - ((25+30)*x1 + (18+22)*x2 + (16+18)*x3) >= alpha*(20-15) + 0.5*((30-25)*x1 + (22-18)*x2 + (18-16)*x3)

# The problem data is written to an .lp file
interv.writeLP("MiniProject3-interval-linear-programming.lp")

# The problem is solved using PuLP's choice of Solver
interv.solve(solver=GLPK(msg=False))

# The status of the solution is printed to the screen
print("Status:", LpStatus[interv.status])

# Each of the variables is printed with its optimum value
for v in interv.variables():
    print(v.name, "=", v.varValue)

revenue = value(interv.objective)
revenue
print("The maximal revenue by using Interval Linear Programming is:${}".format(round(revenue,3))) 
# add 'dollar' sign for test

# Print the obj func optimal value and roots in another way
print("X1 optimal value:", x1.varValue)
print("X2 optimal value:", x2.varValue)
print("X3 optimal value:", x3.varValue)

# Result with 0.5 alpha
The maximal revenue by using Interval Linear Programming is:$391250.0
X1 optimal value: 590.0
X2 optimal value: 50.0
X3 optimal value: 0.0



# Approach 2 of Interval Linear Programming by building for loop for alpha
interv = LpProblem(name='MiniProject3-interval-linear-programming', sense=LpMaximize)

# Create decision variables
x1 = LpVariable('corn', lowBound=0, upBound=None, cat='Continuous') # continuous is default
x2 = LpVariable('cotton', lowBound=50, upBound=None, cat='Continuous')
x3 = LpVariable('sorghum', lowBound=0, upBound=None, cat='Continuous')
# alpha = LpVariable("alpha", lowBound=0, upBound=1, cat='Continuous')

# maximize the obj function: [500,750]corn + [400,500]cotton + [375,400]sorghum
interv += 1/2*(500 + 750)*x1 + 1/2*(400 + 500)*x2 + 1/2*(375 + 400)*x3 # Objective function

# Subject to the constraints
# For loop
for alpha_i in np.arange(0,1.1,0.1):
    # investment constraint:  [25,40]*x1 + [20,30]*x2 + [12,18]*x3 <= 100000 - 20000 - 15000 - 10000
    interv += 25*x1 + 20*x2 + 12*x3 <= 100000 - 20000 - 15000 - 10000 # 55000
    interv += (55000) + (55000) - ((25+40)*x1 + (20+30)*x2 + (12+18)*x3) >= alpha_i*((40-25)*x1 + (30-20)*x2 + (18-12)*x3)
    interv += x1 + x2 + x3 == 640 # land constraint
    # water constraint:  [25,30]*x1 + [18,22]*x2 + [16,18]*x3 <= 18*640 + [15,20]*640
    interv += 25*x1 + 18*x2 + 16*x3 <= 18*640 + 20*640
    interv += (18*640 + 15*640) + (18*640 + 20*640) - ((25+30)*x1 + (18+22)*x2 + (16+18)*x3) >= alpha_i*(20-15) + 0.5*((30-25)*x1 + (22-18)*x2 + (18-16)*x3)


# The problem data is written to an .lp file
interv.writeLP("MiniProject3-interval-linear-programming.lp")

# The problem is solved using PuLP's choice of Solver
interv.solve(solver=GLPK(msg=False))

# The status of the solution is printed to the screen
print("Status:", LpStatus[interv.status])

# Each of the variables is printed with its optimum value
for v in interv.variables():
    print(v.name, "=", v.varValue)

revenue = value(interv.objective)
revenue
print("The maximal revenue by using Interval Linear Programming is:${}".format(round(revenue))) 
# add 'dollar' sign for test

# Print the obj func optimal value and roots in another way
print("X1 optimal value:", x1.varValue)
print("X2 optimal value:", x2.varValue)
print("X3 optimal value:", x3.varValue)
